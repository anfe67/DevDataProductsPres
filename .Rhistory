tapply(mtcars$hp, mean)
tapply(mtcars, mtcars$mt, mean)
summary(subset(mtcars,mtcars$cyl==4 |mtcars$cyl==8))
tapply(mtcars$cyl, mtcars$hp, mean)
summary(tapply(mtcars$cyl, mtcars$hp, mean))
summary(subset(mtcars,mtcars$cyl==4 |mtcars$cyl==8))
summary(subset(mtcars,mtcars$cyl==4 ))
summary(subset(mtcars,mtcars$cyl==4))$hp
summary(subset(mtcars,mtcars$cyl==4))
summary(subset(mtcars,mtcars$cyl==4))[4]
summary(subset(mtcars,mtcars$cyl==4))
summary(subset(mtcars,mtcars$cyl==8))
209.2 - 82.64
debug(ls)
ls
ls()
debug(ls)
ls()
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
x
e
y
?rnorm
rbinom(10, 10, 0.75)
library(httr)
html2 = GET(url)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html2 = GET(url)
parsedHtml = htmlParse(content2,asText=TRUE)
library(XML)
parsedHtml = htmlParse(content2,asText=TRUE)
content2 = content(html2,as="text")
parsedHtml = htmlParse(content2,asText=TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
pg1 = GET("http://httpbin.org/basic-auth/user/passwd")
pg1
pg2 = GET("http://httpbin.org/basic-auth/user/passwd",
authenticate("user","passwd"))
pg2
install.packages("rvest")
library(rvest)
lego_movie <- html("http://www.imdb.com/title/tt1490017/")
lego_movie
lego_movie %>%
html_node("strong span") %>%
html_text() %>%
as.numeric()
lego_movie %>%
html_nodes("#titleCast .itemprop span") %>%
html_text()
lego_movie %>%
html_nodes("table") %>%
.[[3]] %>%
html_table()
vignette("selectorgadget")
library(httr)
set.seed(13435)
X <- data.frame("var1"=sample(1:5),"var2"=sample(6:10),"var3"=sample(11:15))
X <- X[sample(1:5),]; X$var2[c(1,3)] = NA
X
X[,1]
X[,"var1"]
X[1:2,"var2"]
X[(X$var1 <= 3 & X$var3 > 11),]
X[(X$var1 <= 3 | X$var3 > 15),]
X[which(X$var2 > 8),]
sort(X$var1)
sort(X$var1,decreasing=TRUE)
sort(X$var2,na.last=TRUE)
X[order(X$var1),]
X[order(X$var1,X$var3),]
library(plyr)
arrange(X,var1)
arrange(X,desc(var1))
X$var4 <- rnorm(5)
X
Y <- cbind(X,rnorm(5))
Y
sessionInfo()
install.packages("Sweawe")
install.packages("Sweave")
install.packages("sweave")
help("Sweave", package="utils")
install.packages("cachesweave")
install.packages("cacher")
library(swirl)
swirl()
coinPlot(10)
coinPlot(10000)
qnorm(95)
qnorm(.95)
.6 +/- qnorm(.975)*sqrt(0.6*0.4/100)
.6 - qnorm(.975)*sqrt(0.6*0.4/100)
c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
.6 + c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
binom.test(60, 100)
binom.test(60, 100)$conf.int
mmywald(.2)
mywald(.2)
ACCompar(20)
lamb<-5/94.32
lamb + c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5, 94.32)
poisson.test(5, 94.32)$conf
ppois(15)
ppois(lambda=15)
? ppois
ppois(c(10), lambda=15)
?qnorm
qnorm(0.975, mean=1100, sd=75)
qnorm(0.95, mean=1100, sd=75)
pbinom(4, size = 5, prob = .5)
pbinom(5, size = 5, prob = .5)
(0.5^5 )*2
0.5^5
choose(5,4)
choose(5,4)*0.5^5
choose(5,4)*0.5^5 + choose(5,5)*0.5^5
shiny::runApp('Dropbox/Documenti/DataScience/Shiny')
shiny::runApp('Dropbox/Documenti/DataScience/Shiny')
shiny::runApp('Dropbox/Documenti/DataScience/Shiny')
shiny::runApp('Dropbox/Documenti/DataScience/Shiny')
shiny::runApp('Dropbox/Documenti/DataScience/Shiny')
shiny::runApp('Dropbox/Documenti/DataScience/Shiny')
shiny::runApp('Dropbox/Documenti/DataScience/Shiny')
shiny::runApp('Dropbox/Documenti/DataScience/Shiny')
shiny::runApp('Dropbox/Documenti/DataScience/Shiny')
shiny::runApp('Dropbox/Documenti/DataScience/Shiny')
shiny::runApp('Dropbox/Documenti/DataScience/Shiny')
shiny::runApp('Dropbox/Documenti/DataScience/Shiny')
shiny::runApp('Dropbox/Documenti/DataScience/Shiny')
shiny::runApp('Dropbox/Documenti/DataScience/Shiny')
shiny::runApp('Dropbox/Documenti/DataScience/Shiny')
shiny::runApp('Dropbox/Documenti/DataScience/Shiny')
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='anfe67',
token='6E9E685873DE519B2601D9F91B5D09D6',
secret='<SECRET>')
shinyapps::setAccountInfo(name='anfe67',
token='6E9E685873DE519B2601D9F91B5D09D6',
secret='<SECRET>')
shinyapps::setAccountInfo(name='anfe67', token='6E9E685873DE519B2601D9F91B5D09D6', secret='0d0SNt+Du9pwO1U+FyMbUrETzpFguI0hBjuZaEZA')
library(shinyapps)
shiny::runApp('Dropbox/Documenti/DataScience/Shiny')
mu0<-30
mua<-32
sigma<-4
n<-16
alpha<-0.05
z<-qnorm(1-alpha)
pnorm(mu0 + z*sigma/sqrt(n), mean=mua, sd=sigma/sqrt(n), lower.tail = FALSE)
mu0<-30
mua<-32
sigma<-4
n<-16
alpha<-0.01
z<-qnorm(1-alpha)
pnorm(mu0 + z*sigma/sqrt(n), mean=mua, sd=sigma/sqrt(n), lower.tail = FALSE)
mu0<-30
mua<-32
sigma<-4
n<-16
alpha<-0.0196
z<-qnorm(1-alpha)
pnorm(mu0 + z*sigma/sqrt(n), mean=mua, sd=sigma/sqrt(n), lower.tail = FALSE)
mu0<-30
mua<-32
sigma<-4
n<-16
alpha<-0.02
z<-qnorm(1-alpha)
pnorm(mu0 + z*sigma/sqrt(n), mean=mua, sd=sigma/sqrt(n), lower.tail = FALSE)
mu0<-30
mua<-32
sigma<-4
n<-16
alpha<-0.01
z<-qnorm(1-alpha)
pnorm(mu0 + z*sigma/sqrt(n), mean=mu0, sd=sigma/sqrt(n), lower.tail = FALSE)
mu0<-30
mua<-32
sigma<-4
n<-16
alpha<-0.02
z<-qnorm(1-alpha)
pnorm(mu0 + z*sigma/sqrt(n), mean=mu0, sd=sigma/sqrt(n), lower.tail = FALSE)
mu0<-30
mua<-32
sigma<-4
n<-16
alpha<-0.02
z<-qnorm(1-alpha)
pnorm(mu0 + z*sigma/sqrt(n), mean=mua, sd=sigma/sqrt(n), lower.tail = FALSE)
mu0<-30
mua<-32
sigma<-4
n<-16
alpha<-0.05
z<-qnorm(1-alpha)
pnorm(mu0 + z*sigma/sqrt(n), mean=mua, sd=sigma/sqrt(n), lower.tail = FALSE)
pnorm(mu0 + z*sigma/sqrt(n), mean=mu0, sd=sigma/sqrt(n), lower.tail = FALSE)
library(ggplot2)
library(manipulate)
mu0 = 30
myplot <- function(sigma, mua, n, alpha){
g = ggplot(data.frame(mu = c(27, 36)), aes(x = mu))
g = g + stat_function(fun=dnorm, geom = "line",
args = list(mean = mu0, sd = sigma / sqrt(n)),
size = 2, col = "red")
g = g + stat_function(fun=dnorm, geom = "line",
args = list(mean = mua, sd = sigma / sqrt(n)),
size = 2, col = "blue")
xitc = mu0 + qnorm(1 - alpha) * sigma / sqrt(n)
g = g + geom_vline(xintercept=xitc, size = 3)
g
}
manipulate(
myplot(sigma, mua, n, alpha),
sigma = slider(1, 10, step = 1, initial = 4),
mua = slider(30, 35, step = 1, initial = 32),
n = slider(1, 50, step = 1, initial = 16),
alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05)
)
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample",  alt = "one.sided")$power
power.t.test(n = 16, delta = 2, sd=4, type = "one.sample",  alt = "one.sided")$power
power.t.test(n = 16, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$power
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample",  alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd=4, type = "one.sample",  alt = "one.sided")$n
power.t.test(power = .8, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, sd=200, n=27, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, sd=200, n=26, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, sd=200, n=28, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, sd=200, n=27, type = "one.sample", alt = "one.sided")$delta
set.seed(1010093)
pValues <- rep(NA, 1000)
for (i in 1:1000) {
y <- rnorm(20)
x <- rnorm(20)
pValues[i] <- summary(lm(y ~ x))$coeff[2, 4]
}
# Controls false positive rate
sum(pValues < 0.05)
sum(p.adjust(pValues, method = "bonferroni") < 0.05)
sum(p.adjust(pValues, method = "BH") < 0.05)
set.seed(1010093)
pValues <- rep(NA, 1000)
for (i in 1:1000) {
x <- rnorm(20)
# First 500 beta=0, last 500 beta=2
if (i <= 500) {
y <- rnorm(20)
} else {
y <- rnorm(20, mean = 2 * x)
}
pValues[i] <- summary(lm(y ~ x))$coeff[2, 4]
}
trueStatus <- rep(c("zero", "not zero"), each = 500)
table(pValues < 0.05, trueStatus)
set.seed(1010093)
pValues <- rep(NA, 1000)
for (i in 1:1000) {
x <- rnorm(20)
# First 500 beta=0, last 500 beta=2
if (i <= 500) {
y <- rnorm(20)
} else {
y <- rnorm(20, mean = 2 * x)
}
pValues[i] <- summary(lm(y ~ x))$coeff[2, 4]
}
trueStatus <- rep(c("zero", "not zero"), each = 500)
table(pValues < 0.05, trueStatus)
table(p.adjust(pValues, method = "bonferroni") < 0.05, trueStatus)
table(p.adjust(pValues, method = "BH") < 0.05, trueStatus)
par(mfrow = c(1, 2))
plot(pValues, p.adjust(pValues, method = "bonferroni"), pch = 19)
plot(pValues, p.adjust(pValues, method = "BH"), pch = 19)
version
data(ToothGrowth)
str(as.factor(ToothGrowth$dose)
str(as.factor(ToothGrowth$dose))
str(ToothGrowth)
str(as.factor(ToothGrowth$dose))
summary(ToothGrowth)
sapply(as.factor(ToothGrowth$dose), mean(ToothGrowth$len))
?split
?group
library(dplyr)
ToothGrowth %>%
group_by(dose) %>%
summarise_each(funs(mean(., na.rm=TRUE)), length())
ToothGrowth %>%
group_by(dose) %>%
summarise_each(funs(mean(., na.rm=TRUE)))
ToothGrowth %>%
group_by(dose) %>%
summarise_each(funs(mean(., na.rm=TRUE)), -supp)
ToothGrowth %>%
group_by(dose) %>%
summarise_each(funs(median(., na.rm=TRUE)), -supp)
print("Summary means")
ToothGrowth %>%
group_by(dose) %>%
summarise_each(funs(mean(., na.rm=TRUE)), -supp)
print("Summary medians")
ToothGrowth %>%
group_by(dose) %>%
summarise_each(funs(median(., na.rm=TRUE)), -supp)
t.test(ToothGrowth[dose==2]$len, ToothGrowth[dose==1]$len, paired = FALSE, var.equal = TRUE)
t.test(ToothGrowth[ToothGrowth$dose==2]$len, ToothGrowth[ToothGrowth$dose==1]$len, paired = FALSE, var.equal = TRUE)
View(ToothGrowth)
ToothGrowth[ToothGrowth$dose==2]$len
ToothGrowth[ToothGrowth$dose==2]
ToothGrowth[dose==2]
str(ToothGrowth)
ToothGrowth[ToothGrowth$dose==2]
ToothGrowth[dose==2]
ToothGrowth[dose==2]$len
ToothGrowth[]$len
ToothGrowth[dose==1]$len
ToothGrowth[ToothGrowth$dose==1]$len
ToothGrowth[len,dose==1]$len
ToothGrowth[len,dose==1]
ToothGrowth[,len]
ToothGrowth[,ToothGrowth$len]
ToothGrowth[, ToothGrowth$dose==2]
ToothGrowth[,]
ToothGrowth[,c(dose)==1]
ToothGrowth[,2]
ToothGrowth[,1]
ToothGrowth[,3]
ToothGrowth[, c(3)==2]
ToothGrowth[, c(2)==2]
ToothGrowth[, c(2)==2.0]
ToothGrowth[, c("dose")==2.0]
ToothGrowth[, c("dose")==2]
ToothGrowth[, dose==2]
ToothGrowth[, "dose"==2]
ToothGrowth[, "dose"==2.0]
ToothGrowth$len[ToothGrowth$supp=="OJ"]
t.test(ToothGrowth$len[ToothGrowth$supp=="OJ"], ToothGrowth$len[ToothGrowth$supp=="VC"], paired = FALSE, var.equal = TRUE)
tTest<-t.test(ToothGrowth$len[ToothGrowth$supp=="OJ"], ToothGrowth$len[ToothGrowth$supp=="VC"], paired = FALSE, var.equal = TRUE)
str(tTest)
tTest.conf.int
tTest$conf.int
tTest<-t.test(ToothGrowth$len[ToothGrowth$dose==1], ToothGrowth$len[ToothGrowth$dose==1], paired = FALSE, var.equal = TRUE)
tTest$conf.int
tTest1<-t.test(ToothGrowth$len[ToothGrowth$dose==0.5], ToothGrowth$len[ToothGrowth$dose==1], paired = FALSE, var.equal = TRUE)
tTest2<-t.test(ToothGrowth$len[ToothGrowth$dose==1], ToothGrowth$len[ToothGrowth$dose==2], paired = FALSE, var.equal = TRUE)
tTest1$conf.int
tTest2$conf.int
tTest1
tTest2
var (ToothGrowth$len[ToothGrowth$dose==0.5])
var (ToothGrowth$len[ToothGrowth$dose==1])
var (ToothGrowth$len[ToothGrowth$dose==2])
tTest1<-t.test(ToothGrowth$len[ToothGrowth$dose==0.5], ToothGrowth$len[ToothGrowth$dose==1], paired = FALSE, var.equal = FALSE)
tTest2<-t.test(ToothGrowth$len[ToothGrowth$dose==1], ToothGrowth$len[ToothGrowth$dose==2], paired = FALSE, var.equal = FALSE)
tTest1$conf.int
tTest2$conf.int
library(UsingR)
data(father.son)
y <- (father.son$sheight - mean(father.son$sheight)) / sd(father.son$sheight)
x <- (father.son$fheight - mean(father.son$fheight)) / sd(father.son$fheight)
rho <- cor(x, y)
library(ggplot2)
g = ggplot(data.frame(x = x, y = y), aes(x = x, y = y))
g = g + geom_point(size = 6, colour = "black", alpha = 0.2)
g = g + geom_point(size = 4, colour = "salmon", alpha = 0.2)
g = g + xlim(-4, 4) + ylim(-4, 4)
g = g + geom_abline(intercept = 0, slope = 1)
g = g + geom_vline(xintercept = 0)
g = g + geom_hline(yintercept = 0)
g = g + geom_abline(intercept = 0, slope = rho, size = 2)
g = g + geom_abline(intercept = 0, slope = 1 / rho, size = 2)
g
g = ggplot(data.frame(x, y), aes(x = x, y = y))
g = g + geom_point(size = 5, alpha = .2, colour = "black")
g = g + geom_point(size = 4, alpha = .2, colour = "red")
g = g + geom_vline(xintercept = 0)
g = g + geom_hline(yintercept = 0)
g = g + geom_abline(position = "identity")
g = g + geom_abline(intercept = 0, slope = rho, size = 2)
g = g + geom_abline(intercept = 0, slope = 1 / rho, size = 2)
g = g + xlab("Father's height, normalized")
g = g + ylab("Son's height, normalized")
g
install.packages("rcmdr")
install.packages("Rcmdr")
install.packages("tcltk")
Rcmdr::
library(Rcmdr)
library(swirl)
swirl()
install_from_swirl("Regression Models")
library(swirl)
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3,
| col='red')
abline(regrline, lwd=3, | col='red')
abline(regrline, lwd=3, col='red')
summary(regrline)
fit<-lm(child~parent, galton)
summary(fit)
mean ( fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic<-fit$coef[1]
ols.slope<-fit$coef[2]
lhs - rhs
all.equal(lhs, rhs)
varchild<-var(galton$child)
varChild<-var(galton$child)
varRes<-var(fit$residuals)
varEst<-var(est(ols.slope, ols.ic))
all.equal(varChild)
all.equal(varChild, varRes+varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean (efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
library(swirl)
swirl()
6
dim(InsectSprays)
head(InsectSprays, 15)
A
sA
summary(sA[ ,2])
summary(InsectSprays[ ,2])
sapply(InsectSprays, )
?
sapply(InsectSprays, class)
fit <-lm(count ~ spray, InsectSprays)
summary(fit$coefficients)
summary(fit$coef)
fit$coefficients
fit$coef
summary(fit)$coef
est<- summary(fit)$coef$Estimate
est<- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <-lm(count ~ spray - 1, InsectSprays)
summary(fit)$coef
summary(nfit)$coef
spray2<-relevel(InsectSprays$spray, "C")
fit2<-lm(spray ~ count, spray2)
fit2<-lm(count ~ spray, spray2)
fit2<-lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
((fit$coef[2])-(fit$coef[3]))/1.6011
(fit$coef[2]-(fit$coef[3])/1.6011
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit<-(Numeric~Year, hunger)
fit<-lm(Numeric ~ Year, hunger)
summary(fit)$coef
lmF<-lm(hunger[hunger$Sex=="Female"]$Numeric ~ hunger$Sex=="Female"]Year, hunger)
lmF<-lm(hunger[hunger$Sex=="Female"]$Numeric ~ hunger$Sex=="Female"]Year)
lmF<-lm(hunger[hunger[Sex=="Female"]$Numeric ~ hunger[Sex=="Female"]Year)
lmF<-lm(hunger[Sex=="Female"]$Numeric ~ hunger[Sex=="Female"]Year)
hunger[Sex=="female"]
hunger[hunger$Sex=="female"]
lmF<-lm(hunger[hunger$Sex=="female"]$Numeric ~ hunger[hunger$Sex=="female"]Year)
lmF<-lm(hunger[hunger$Sex=="female"]$Numeric ~ hunger[hunger$Sex=="female"]$Year)
lmF<-lm(hunger[hunger$Sex=="female"]$Numeric ~ hunger[hunger$Sex=="female"]$Year, hunger)
lmF<-lm(hunger$Numeric[hunger$Sex=="female"] ~ hunger$Year[hunger$Sex=="female"], hunger)
lmF <- lm(hunger$Numeric[hunger$Sex=="Female"] ~ hunger$Year[hunger$Sex=="Female"])
lmM <- lm(hunger$Numeric[hunger$Sex=="Male"] ~ hunger$Year[hunger$Sex=="Male"])
lmBoth <- lm(Numeric ~ Year+ Sex, hunger)
summary(lmBoth)
lmInter<- lm(Numeric~Year + Sex + Sex*Year, hunger)
summary(lmInter)
mtcars
fit <-lm(mpg ~ cylinders + weight, mtcars)
fit <-lm(mpg ~ cyl + weight, mtcars)
fit <-lm(mpg ~ cyl + wt, mtcars)
summary(fit)
fit <-lm(mpg ~ as.factor(cyl) + wt, mtcars)
summary(fit)
fit_inter <- lm(mpg ~ factor(cyl) * wt, data = mtcars)
fit <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(fit)
summary(fit_inter)
anova (fit, fit_inter, test="Chisq")
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
fit4<-lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(fit4)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit5<-lm(y~x)
summary(ffit)
summary(fit5)
hatvalues(fit5)
dfbetas(fit5)[, 2]
library(slidify)
setwd("~/Dropbox/Documenti/Coursera/DataProducts/Week 4/Presentation2")
author("DataProductsPitch")
shiny::runApp('~/Dropbox/Documenti/Coursera/DataProducts/Week 4')
browseURL("index.html")
